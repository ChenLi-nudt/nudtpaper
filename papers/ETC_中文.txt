现代独立GPU支持统一内存空间和实时请求取页。这使得CPU内存和GPU内存之间的数据移动可由驱动和硬件自动管理，因此，软件开发人员的工作量大大减少。然而，当应用程序的工作数据集超过GPU内存的物理容量时，由此产生的数据移动开销可能会导致严重的性能损失。

本文提出了一种提升内存超额配置情况下程序性能的ETC内存管理框架，该框架可以对应用程序不感知地掩藏逐出请求延迟，缓解内存抖动问题并可以提高有效的内存空间。 ETC主要包括三项技术：1. 主动逐出页技术（E）：通过主动逐出作废的页，提前为新写入的数据创建空间，可以隐藏页逐出延迟。2. 内存感知的并行性控制（T）：当页缺失频率变高时，可以动态地降低GPU并行性来减少缺页中断，缓解内存抖动现象；3. 内存压缩技术（C）：可以在不增加实际物理内存容量的情况下存放更大的工作集。

我们发现没有一种单一的技术适合所有应用程序，因此，ETC将主动逐出页技术，内存感知并行度控制技术和内存压缩技术集成到ETC框架中，该框架对程序员不感知地动态选择最有效的技术组合。ETC将应用程序分为三类：内核之间没有数据共享的常规应用程序，跨内核的数据共享的常规应用程序以及不规则的应用程序。我们的评估表明，ETC完全缓解了没有数据共享的常规应用程序的超额预订开销，并提供了与理想的无限GPU内存基线类似的性能。我们还表明，对于具有数据共享和不规则的常规应用，ETC优于最先进的基线60.4％和270％应用程序




引言：

随着面向高性能计算的应用程序对密集型计算需求和程序员对高可编程性需求的不断增加，如今图像处理器已经成为高性能计算领域首选的计算平台。然而，想要使得应用程序发挥出最大的性能，依然要求程序员手动调整代码来适应GPU的系统结构和内存容量的要求。而随着GPGPU应用程序的工作数据集不断增大，有限地GPU内存容量已经成为影响硬件设计和程序性能的严重瓶颈。

如今内存虚拟化支持不断演化，GPGPU程序可以更加容易地扩展工作数据集，使之超出GPU内存物理容量的限制。现代GPU配备了统一内存空间和实时请求取页功能，这些新的特性使得开发者不再需要手动地管理数据在CPU内存和GPU内存之间移动。但是当一个GPU应用程序的工作数据集超出了内存的物理空间时，即内存超额配置时，旧数据必须被逐出，为新数据腾出空间。我们在一个真实GPU系统的测试显示，当内存超额配置时，真实GPGPU应用程序会遭受巨大的性能损失，有时甚至会发生宕机。

部分内存超额配置引发的性能损失可以通过程序员的软件优化来缓解。例如，程序员可以将只读数据从CPU内存端复制到GPU内存，当需要更多空间存放新数据，这些只读数据不再需要使用时，可以直接丢弃这些只读数据，而无需逐出写回到CPU的内存；程序员可以将预取请求和逐出请求重叠起来，新请求的数据无需等待内存逐出操作，有效地减少了延迟。但是，采用软件优化方法来降低内存超额配置引发的性能损失有几个明显缺陷。首先，这要求程序员能够直接分清数据是否为只读数据；其次，程序员必须理解并利用好成千上万条线程的局部性原理，直接将不同地数据页映射到CPU或GPU的内存。最后，程序员需要手动地在CPU和GPU内存之间搬运数据。这些缺陷在云计算环境里会变得更加明显，因为共享一个GPU的虚拟机用户无法知道其他用户的应用程序的工作数据集大小，难以对内存超额配置情况进行软件优化。因此，设计一种能够降低内存超额配置开销并且对程序员不感知的机制的需求非常迫切。

我们观察到利用当前GPGPU应用程序的两个关键特性可以更好地管理好超额配置的内存。首先，由于内存超额配置带来的性能损失大小取决于不同应用程序的不同访存特性。基于GPU内存的页访问是否具有可预测性，我们大致将应用程序分为规则应用程序和不规则应用程序；第二，内存超额配置开销的来源与程序类型相关。内存抖动，即重复地在CPU和GPU内存之间进行页来回数据迁移，主导了不规则程序的内存超额配置开销的原因。而较高的逐出页延迟则是规则程序的内存超额配置开销的主要来源。我们还发现同一个应用程序不同的GPU内核函数若存在数据共享，则会进一步影响GPU内存超额配置的性能。

基于这些特性，我们提出了一种叫ETC的内存超额配置管理框架。该框架以一种对程序员不感知地方式来降低内存超额配置开销。ETC首先高效并自动地将应用程序划分为数据不共享的规则应用程序；数据共享的规则应用程序以及不规则的应用程序；ETC之后会基于应用程序的类型选择最有效的策略组合来减缓内存超额配置开销。ETC集成了多个模块，它们协同工作可以有效掩藏或减少内存超额配置带来的开销。ETC主要包括（1）一个应用划分器，能够通过测量的访存合并系数来检测并判断应用程序的类型；（2）一种策略引擎，能够基于应用程序类型选择并采用最合适的策略；（3）一种主动页逐出技术，针对规则应用程序，主动提前逐出无用页，为之后要请求的页腾出物理空间；（4）一种内存感知的并行控制策略，针对不规则应用程序，通过降低线程级并行来减少有效在线工作数据集；（5）一种主存压缩引擎，能够为应用程序有效提高可用存储空间。

我们的ETC是一种软硬件协同机制。我们实验评估了来自多个基准测试集的15个应用程序。性能测试结果显示，ETC在降低内存超额配置开销上非常有效。对于数据不共享的规则应用程序，ETC几乎能够消除内存超额配置带来的性能损失，使之与无内存超额配置的应用程序性能相当。对于数据共享的规则应用程序和不规则应用程序，ETC相对于当前技术，性能分别提高了60.4%和270%。

本章主要包括以下贡献：
据我们所知，这是第一篇对GPU内存超额配置下的性能开销做了深度分析，并且基于不同的程序类型分析出产生GPU内存超额配置下的性能损失的原因。

我们提出了一种软硬件结合的解决方案，显著降低内存超额配置下的性能损失。我们的方法对程序员不感知，不要求任何代码的修改。

我们开发了三种内存超额配置优化策略。我们发现并没有任何一种单一方法能够适用于所有类型的应用程序。从这个角度出发，ETC根据访存特性划分应用程序的类别，并为不同类别的程序采用不同的策略组合来优化性能。
